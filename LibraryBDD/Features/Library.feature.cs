// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LibraryBDD.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class LibraryFeature : object, Xunit.IClassFixture<LibraryFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Library.feature"
#line hidden
        
        public LibraryFeature(LibraryFeature.FixtureData fixtureData, LibraryBDD_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Library", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add one media")]
        [Xunit.TraitAttribute("FeatureTitle", "Library")]
        [Xunit.TraitAttribute("Description", "Add one media")]
        [Xunit.TraitAttribute("Category", "AddMedia")]
        public void AddOneMedia()
        {
            string[] tagsOfScenario = new string[] {
                    "AddMedia"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add one media", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("Create Library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "m_Titre",
                            "m_NumeroReference",
                            "m_NombreExemplairesDisponibles"});
                table1.AddRow(new string[] {
                            "\"Media de test\"",
                            "150291",
                            "26"});
#line 6
 testRunner.And("Add this media :", ((string)(null)), table1, "And ");
#line hidden
#line 9
 testRunner.When("Add this media in library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "m_Titre",
                            "m_NumeroReference",
                            "m_NombreExemplairesDisponibles"});
                table2.AddRow(new string[] {
                            "\"Media de test\"",
                            "150291",
                            "26"});
#line 10
 testRunner.Then("The library contain media :", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove one media")]
        [Xunit.TraitAttribute("FeatureTitle", "Library")]
        [Xunit.TraitAttribute("Description", "Remove one media")]
        [Xunit.TraitAttribute("Category", "RemoveMedia")]
        public void RemoveOneMedia()
        {
            string[] tagsOfScenario = new string[] {
                    "RemoveMedia"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove one media", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given("Create Library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "m_Titre",
                            "m_NumeroReference",
                            "m_NombreExemplairesDisponibles"});
                table3.AddRow(new string[] {
                            "\"Media de test\"",
                            "150291",
                            "1"});
#line 17
 testRunner.And("Add this media :", ((string)(null)), table3, "And ");
#line hidden
#line 20
 testRunner.When("Add this media in library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "m_Titre",
                            "m_NumeroReference",
                            "m_NombreExemplairesDisponibles"});
                table4.AddRow(new string[] {
                            "\"Media de test\"",
                            "150291",
                            "1"});
#line 21
 testRunner.And("Remove this media :", ((string)(null)), table4, "And ");
#line hidden
#line 24
 testRunner.Then("Library are empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Loaned one media")]
        [Xunit.TraitAttribute("FeatureTitle", "Library")]
        [Xunit.TraitAttribute("Description", "Loaned one media")]
        [Xunit.TraitAttribute("Category", "CreateLoan")]
        public void LoanedOneMedia()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateLoan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Loaned one media", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("Create Library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "m_Titre",
                            "m_NumeroReference",
                            "m_NombreExemplairesDisponibles"});
                table5.AddRow(new string[] {
                            "\"Media de test\"",
                            "150291",
                            "10"});
#line 29
 testRunner.And("Add this media :", ((string)(null)), table5, "And ");
#line hidden
#line 32
 testRunner.When("Add this media in library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.And("Loan media with m_NumeroReference is 150291 with user Tony Maré", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.Then("m_NombreExemplairesDisponibles of 150291 is 9 in library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("Loans contain one media with m_NumeroReference is 150291 and user is Tony Maré", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Return an Loan")]
        [Xunit.TraitAttribute("FeatureTitle", "Library")]
        [Xunit.TraitAttribute("Description", "Return an Loan")]
        [Xunit.TraitAttribute("Category", "ReturnLoan")]
        public void ReturnAnLoan()
        {
            string[] tagsOfScenario = new string[] {
                    "ReturnLoan"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return an Loan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
 testRunner.Given("Create Library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "m_Titre",
                            "m_NumeroReference",
                            "m_NombreExemplairesDisponibles"});
                table6.AddRow(new string[] {
                            "\"Media de test\"",
                            "150291",
                            "10"});
#line 40
 testRunner.And("Add this media :", ((string)(null)), table6, "And ");
#line hidden
#line 43
 testRunner.When("Add this media in library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And("Loan media with m_NumeroReference is 150291 with user \"Tony Maré\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("\"Tony Maré\" return media whose m_NumeroReference is 150291", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.Then("the loan of \"Tony Maré\" with m_NumeroReference 150291 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                LibraryFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                LibraryFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
